name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop
      - feature/*
      - bugfix/*
      - hotfix/*
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build, Test and Analyze
    needs: verify-commits
    runs-on: ubuntu-24.04
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      - name: Cache SonarQube
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: sonar-${{ runner.os }}-${{ hashFiles('**/pom.xml') }}
          restore-keys: sonar-${{ runner.os }}-

      - name: Run Checkstyle
        run: ./mvnw -B checkstyle:check

      - name: Import GPG key
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg 
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          KEY_ID=$(gpg --list-keys --with-colons | grep pub | cut -d':' -f5)
          echo "default-key ${KEY_ID}" >> ~/.gnupg/gpg.conf
          echo "use-agent" >> ~/.gnupg/gpg.conf

      - name: Run SonarQube analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: ./mvnw -B clean verify sonar:sonar -Dsonar.projectKey=darioajr_java-fix-to-avro -Dsonar.login=${{ secrets.SONAR_TOKEN }}
      
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  release:
    name: Release and Publish
    needs: build
    runs-on: ubuntu-24.04
    if: github.ref == 'refs/heads/main' && !startsWith(github.head_ref, 'dependabot/')
    permissions:
      contents: write
    steps:
      
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: Import GPG key
        run: |
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --batch --import
          KEY_ID=$(gpg --list-keys --with-colons | grep '^pub' | cut -d':' -f5)
          echo "default-key ${KEY_ID}" >> ~/.gnupg/gpg.conf
          echo "pinentry-mode loopback" >> ~/.gnupg/gpg.conf
          echo "use-agent" >> ~/.gnupg/gpg.conf
        env:
          GPG_TTY: $(tty)

      - name: Configure Maven `settings.xml`
        run: |
          mkdir -p ~/.m2
          cat <<EOF > ~/.m2/settings.xml
          <settings>
            <servers>
              <server>
                <id>central</id>
                <username>${{ secrets.SONATYPE_USERNAME }}</username>
                <password>${{ secrets.SONATYPE_PASSWORD }}</password>
              </server>
            </servers>
          </settings>
          EOF
 
      - name: Generate release version
        run: |
          git config --global user.email "darioajr@gmail.com"
          git config --global user.name "Dario Alves Junior"
          
          ./mvnw release:prepare -B
          TAG_NAME=$(git describe --tags --abbrev=0)
          echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
          VERSION=${TAG_NAME//v/}
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      
          ./mvnw release:perform -B
          git push origin --tags
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          MAVEN_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ env.TAG_NAME }}
          tag_name: ${{ env.TAG_NAME }}
          files: |
            target/*.jar
            target/*.pom
            target/*.asc
            target/*.sha1
            target/*.sha256
            target/*.sha512
          draft: false
          prerelease: false
          generate_release_notes: true
          make_latest: true
          fail_on_unmatched_files: false
          token: ${{ secrets.GITHUB_TOKEN }}

  verify-commits:
    name: Verify Commits
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.sha }}
          fetch-depth: 0

      - name: Verify Signed-off-by
        run: |
          for commit in $(git rev-list --no-merges origin/${{ github.event.pull_request.base.ref }}..HEAD); do
            if ! git log -1 --format=%B "$commit" | grep -q "^Signed-off-by: "; then
              echo "Commit $commit is missing Signed-off-by line."
              exit 1
            fi
          done

      - name: Verify Conventional Commits
        uses: wagoid/commitlint-github-action@v5